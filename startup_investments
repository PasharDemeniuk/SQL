1. Отобразите все записи из таблицы company по компаниям, которые закрылись.
SELECT *
FROM company
WHERE status = 'closed';

2. Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total.

SELECT funding_total
FROM company
WHERE country_code ='USA'
AND category_code = 'news'
ORDER BY funding_total DESC;

3. Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.

SELECT SUM(price_amount)
FROM acquisition
WHERE term_code ='cash'
AND acquired_at::date BETWEEN '2011-01-01' AND '2013-12-31';

4. Отобразите имя, фамилию и названия аккаунтов людей в поле network_username, у которых названия аккаунтов начинаются на 'Silver'.

SELECT first_name, last_name, network_username
FROM people
WHERE network_username LIKE 'Silver%';

5. Выведите на экран всю информацию о людях, у которых названия аккаунтов в поле network_username содержат подстроку 'money', а фамилия начинается на 'K'.

SELECT *
FROM people
WHERE last_name LIKE 'K%' 
AND network_username LIKE '%money%';

6. Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.

SELECT SUM(funding_total), 
country_code
FROM company
GROUP BY country_code
ORDER BY SUM(funding_total) DESC;

7. Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.

SELECT funded_at::date,
MIN(raised_amount) ,
MAX(raised_amount)
FROM funding_round
GROUP BY funded_at::date
HAVING MIN(raised_amount) != 0 
AND MIN(raised_amount) != MAX(raised_amount);

8. Создайте поле с категориями:
•	Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
•	Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
•	Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.

SELECT *,
    CASE
        WHEN invested_companies < 20 THEN 'low_activity'
        WHEN invested_companies >= 20 AND invested_companies < 100 THEN 'middle_activity'
        WHEN invested_companies >= 100 THEN 'high_activity'
    END
FROM fund;

9. Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.

SELECT ROUND(AVG(investment_rounds),0),
       CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity
FROM fund
GROUP BY activity
ORDER BY ROUND(AVG(investment_rounds),0);

10. Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы. 
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. 
Выгрузите десять самых активных стран-инвесторов: отсортируйте таблицу по среднему количеству компаний от большего к меньшему. Затем добавьте сортировку по коду страны в лексикографическом порядке.

SELECT
    country_code,
    MIN(invested_companies) AS min_investments,
    MAX(invested_companies) AS max_investments,
    AVG(invested_companies) AS avg_investments
FROM
    fund
WHERE
    founded_at::date BETWEEN '2010-01-01' AND '2012-12-31'
GROUP BY
    country_code
HAVING
    MIN(invested_companies) != 0
ORDER BY
    AVG(invested_companies) DESC,
    country_code ASC
LIMIT 10;

11. Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.

WITH pre AS (SELECT *
FROM people AS p
LEFT JOIN education AS e ON p.id = e.person_id)

SELECT first_name,
last_name,
instituition
FROM pre;

12. Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.

WITH PRE AS (SELECT *
FROM people AS p
LEFT JOIN education AS e ON p.id = e.person_id
LEFT JOIN company AS c ON p.company_id = c.id);


SELECT COUNT (DISTINCT(instituition)),
name
FROM pre
WHERE name IS NOT NULL
GROUP BY name 
ORDER BY COUNT (DISTINCT(instituition)) DESC
LIMIT 5;

13. Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.

SELECT DISTINCT (name) 
FROM company
WHERE id IS NOT NULL 
AND status = 'closed'
AND id IN (SELECT company_id
FROM funding_round
WHERE is_last_round =1
AND is_first_round =1);

14. Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.

WITH per_1 AS (SELECT DISTINCT (id)
FROM company
WHERE id IS NOT NULL
AND status = 'closed'
AND id IN (SELECT company_id
FROM funding_round
WHERE is_last_round =1
AND is_first_round =1))

SELECT DISTINCT p.id
FROM people AS P
JOIN per_1 ON p.company_id = per_1.id;

15. Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.

WITH per_1 AS (SELECT DISTINCT (id)
FROM company
WHERE id IS NOT NULL
AND status = 'closed'
AND id IN (SELECT company_id
FROM funding_round
WHERE is_last_round =1
AND is_first_round =1))

SELECT DISTINCT p.id,  ed.instituition
FROM people AS P
JOIN per_1 ON p.company_id = per_1.id
JOIN education AS ed ON p.id = ed.person_id;

16. Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды.

WITH per_1 AS (SELECT DISTINCT (id)
FROM company
WHERE id IS NOT NULL
AND status = 'closed'
AND id IN (SELECT company_id
FROM funding_round
WHERE is_last_round =1
AND is_first_round =1))

SELECT DISTINCT p.id, 
COUNT(ed.instituition)
FROM people AS P
JOIN per_1 ON p.company_id = per_1.id
JOIN education AS ed ON p.id = ed.person_id
GROUP BY  p.id;

17. Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.

WITH per_1 AS (SELECT DISTINCT (id)
FROM company
WHERE id IS NOT NULL
AND status = 'closed'
AND id IN (SELECT company_id
FROM funding_round
WHERE is_last_round =1
AND is_first_round =1))

SELECT AVG(cnt) AS avg_institutions
FROM (SELECT p.id, 
COUNT(ed.instituition) AS cnt
FROM people AS P
JOIN per_1 ON p.company_id = per_1.id
JOIN education AS ed ON p.id = ed.person_id
GROUP BY p.id ) AS tot_1;

18. Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Socialnet.

WITH per_1 AS (SELECT id
FROM company
WHERE  name = 'Socialnet')

SELECT AVG(cnt) AS avg_institutions
FROM (SELECT p.id, 
COUNT(ed.instituition) AS cnt
FROM people AS P
JOIN per_1 ON p.company_id = per_1.id
JOIN education AS ed ON p.id = ed.person_id
GROUP BY p.id ) AS tot_1;

19. Составьте таблицу из полей:
•	name_of_fund — название фонда;
•	name_of_company — название компании;
•	amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.

WITH comp AS (SELECT *
FROM company
WHERE milestones > 6),
fr AS (SELECT *
FROM funding_round
WHERE funded_at::date BETWEEN '2012-01-01' AND '2013-12-31')

SELECT f.name AS name_of_fund,
comp.name AS name_of_company,
fr.raised_amount AS amount
FROM investment AS invest
JOIN comp ON invest.company_id = comp.id
JOIN fund AS f ON invest.fund_id = f.id
JOIN fr ON invest.funding_round_id = fr.id;

20. Выгрузите таблицу, в которой будут такие поля:
•	название компании-покупателя;
•	сумма сделки;
•	название компании, которую купили;
•	сумма инвестиций, вложенных в купленную компанию;
•	доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы. 
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.

WITH 
c2 AS (SELECT *
       FROM company
       WHERE funding_total > 0)

SELECT c1.name AS acquiring_company_name, 
       a.price_amount, 
       c2.name AS acquired_company_name, 
       c2.funding_total, 
       ROUND(a.price_amount / c2.funding_total)
FROM   acquisition AS a
LEFT JOIN company AS c1 ON c1.id = a.acquiring_company_id 
LEFT JOIN company AS c2 ON c2.id = a.acquired_company_id  
WHERE  a.price_amount > 0
AND    c2.funding_total > 0
ORDER BY  a.price_amount DESC, 
          c2.name 
LIMIT 10;

21. Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.

WITH c AS (SELECT 
           name,
           id, 
           funding_total, 
           category_code 
FROM company
WHERE category_code = 'social'),

fr AS (SELECT 
       EXTRACT(MONTH FROM funded_at::date) AS month_date,
       company_id, raised_amount
from funding_round
WHERE funded_at::date BETWEEN '2010-01-01' AND '2013-12-31'
      AND raised_amount >0 )

SELECT name,
month_date
FROM c 
JOIN fr ON c.id = fr.company_id
ORDER BY name;

22. Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
•	номер месяца, в котором проходили раунды;
•	количество уникальных названий фондов из США, которые инвестировали в этом месяце;
•	количество компаний, купленных за этот месяц;
•	общая сумма сделок по покупкам в этом месяце.
WITH 
pre_1 AS (SELECT EXTRACT(MONTH FROM funded_at::date) AS month_inv,
COUNT (DISTINCT fd.name) AS fund_number
FROM investment AS inv
JOIN fund AS fd ON inv.fund_id = fd.id
JOIN funding_round AS fr ON inv.funding_round_id = fr.id
WHERE funded_at::date BETWEEN '2010-01-01' AND '2013-12-31'
AND fd.country_code = 'USA'
GROUP BY month_inv),

pre_2 AS (SELECT COUNT(acq.acquired_company_id) AS count_acquired,
EXTRACT(MONTH FROM acquired_at::date) AS month_acq,
SUM (price_amount) AS sum_amount
FROM acquisition AS acq
WHERE acquired_at::date BETWEEN '2010-01-01' AND '2013-12-31'
GROUP BY month_acq)

SELECT month_inv, fund_number, count_acquired, sum_amount
FROM pre_1
JOIN pre_2 ON pre_1.month_inv = pre_2.month_acq;

23. Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.

WITH
     inv_2011 AS (
SELECT country_code AS country_code_11,
AVG(funding_total) AS funding_total_11
FROM company AS com
WHERE founded_at::date BETWEEN '2011-01-01' AND '2011-12-31'
GROUP BY country_code_11),

  inv_2012 AS (
SELECT country_code AS country_code_12,
AVG(funding_total) AS funding_total_12
FROM company AS com
WHERE founded_at::date BETWEEN '2012-01-01' AND '2012-12-31'
GROUP BY country_code_12),

  inv_2013 AS (
SELECT country_code AS country_code_13,
AVG(funding_total) AS funding_total_13
FROM company AS com
WHERE founded_at::date BETWEEN '2013-01-01' AND '2013-12-31'
GROUP BY country_code_13)

SELECT country_code_11, funding_total_11,
funding_total_12, funding_total_13
FROM inv_2011 
INNER JOIN inv_2012 ON inv_2011.country_code_11 = inv_2012.country_code_12
INNER JOIN inv_2013 ON inv_2011.country_code_11 = inv_2013.country_code_13
ORDER BY  funding_total_11 DESC;
